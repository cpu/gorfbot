// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cpu/gorfbot/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	storage "github.com/cpu/gorfbot/storage"
	models "github.com/cpu/gorfbot/storage/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddTheme mocks base method
func (m *MockStorage) AddTheme(arg0 models.Theme) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTheme", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTheme indicates an expected call of AddTheme
func (mr *MockStorageMockRecorder) AddTheme(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTheme", reflect.TypeOf((*MockStorage)(nil).AddTheme), arg0)
}

// AddTopic mocks base method
func (m *MockStorage) AddTopic(arg0 models.Topic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTopic", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTopic indicates an expected call of AddTopic
func (mr *MockStorageMockRecorder) AddTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTopic", reflect.TypeOf((*MockStorage)(nil).AddTopic), arg0)
}

// GetEmoji mocks base method
func (m *MockStorage) GetEmoji(arg0 storage.GetEmojiOptions) ([]models.Emoji, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmoji", arg0)
	ret0, _ := ret[0].([]models.Emoji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmoji indicates an expected call of GetEmoji
func (mr *MockStorageMockRecorder) GetEmoji(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmoji", reflect.TypeOf((*MockStorage)(nil).GetEmoji), arg0)
}

// GetThemes mocks base method
func (m *MockStorage) GetThemes(arg0 storage.GetThemeOptions) ([]models.Theme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThemes", arg0)
	ret0, _ := ret[0].([]models.Theme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThemes indicates an expected call of GetThemes
func (mr *MockStorageMockRecorder) GetThemes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThemes", reflect.TypeOf((*MockStorage)(nil).GetThemes), arg0)
}

// GetTopics mocks base method
func (m *MockStorage) GetTopics(arg0 storage.GetTopicOptions) ([]models.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopics", arg0)
	ret0, _ := ret[0].([]models.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopics indicates an expected call of GetTopics
func (mr *MockStorageMockRecorder) GetTopics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopics", reflect.TypeOf((*MockStorage)(nil).GetTopics), arg0)
}

// UpsertEmojiCount mocks base method
func (m *MockStorage) UpsertEmojiCount(arg0 models.Emoji, arg1 bool) (models.Emoji, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEmojiCount", arg0, arg1)
	ret0, _ := ret[0].(models.Emoji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertEmojiCount indicates an expected call of UpsertEmojiCount
func (mr *MockStorageMockRecorder) UpsertEmojiCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEmojiCount", reflect.TypeOf((*MockStorage)(nil).UpsertEmojiCount), arg0, arg1)
}

// UpsertURLCount mocks base method
func (m *MockStorage) UpsertURLCount(arg0 string, arg1 models.URLCount) (models.URLCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertURLCount", arg0, arg1)
	ret0, _ := ret[0].(models.URLCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertURLCount indicates an expected call of UpsertURLCount
func (mr *MockStorageMockRecorder) UpsertURLCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertURLCount", reflect.TypeOf((*MockStorage)(nil).UpsertURLCount), arg0, arg1)
}
