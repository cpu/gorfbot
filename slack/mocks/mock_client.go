// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cpu/gorfbot/slack (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	slack "github.com/cpu/gorfbot/slack"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddReaction mocks base method
func (m *MockClient) AddReaction(arg0 string, arg1 *slack.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReaction indicates an expected call of AddReaction
func (mr *MockClientMockRecorder) AddReaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReaction", reflect.TypeOf((*MockClient)(nil).AddReaction), arg0, arg1)
}

// BotID mocks base method
func (m *MockClient) BotID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BotID")
	ret0, _ := ret[0].(string)
	return ret0
}

// BotID indicates an expected call of BotID
func (mr *MockClientMockRecorder) BotID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BotID", reflect.TypeOf((*MockClient)(nil).BotID))
}

// BotName mocks base method
func (m *MockClient) BotName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BotName")
	ret0, _ := ret[0].(string)
	return ret0
}

// BotName indicates an expected call of BotName
func (mr *MockClientMockRecorder) BotName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BotName", reflect.TypeOf((*MockClient)(nil).BotName))
}

// ConversationID mocks base method
func (m *MockClient) ConversationID(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ConversationID indicates an expected call of ConversationID
func (mr *MockClientMockRecorder) ConversationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationID", reflect.TypeOf((*MockClient)(nil).ConversationID), arg0)
}

// ConversationName mocks base method
func (m *MockClient) ConversationName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ConversationName indicates an expected call of ConversationName
func (mr *MockClientMockRecorder) ConversationName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationName", reflect.TypeOf((*MockClient)(nil).ConversationName), arg0)
}

// Listen mocks base method
func (m *MockClient) Listen(arg0 chan<- *slack.Message, arg1 chan<- *slack.Reaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Listen", arg0, arg1)
}

// Listen indicates an expected call of Listen
func (mr *MockClientMockRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockClient)(nil).Listen), arg0, arg1)
}

// ParseTimestamp mocks base method
func (m *MockClient) ParseTimestamp(arg0 string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTimestamp", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTimestamp indicates an expected call of ParseTimestamp
func (mr *MockClientMockRecorder) ParseTimestamp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTimestamp", reflect.TypeOf((*MockClient)(nil).ParseTimestamp), arg0)
}

// SendMessage mocks base method
func (m *MockClient) SendMessage(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", arg0, arg1)
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockClientMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockClient)(nil).SendMessage), arg0, arg1)
}

// TeamID mocks base method
func (m *MockClient) TeamID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamID")
	ret0, _ := ret[0].(string)
	return ret0
}

// TeamID indicates an expected call of TeamID
func (mr *MockClientMockRecorder) TeamID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamID", reflect.TypeOf((*MockClient)(nil).TeamID))
}

// TeamName mocks base method
func (m *MockClient) TeamName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamName")
	ret0, _ := ret[0].(string)
	return ret0
}

// TeamName indicates an expected call of TeamName
func (mr *MockClientMockRecorder) TeamName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamName", reflect.TypeOf((*MockClient)(nil).TeamName))
}

// UserID mocks base method
func (m *MockClient) UserID(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// UserID indicates an expected call of UserID
func (mr *MockClientMockRecorder) UserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*MockClient)(nil).UserID), arg0)
}

// UserName mocks base method
func (m *MockClient) UserName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// UserName indicates an expected call of UserName
func (mr *MockClientMockRecorder) UserName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserName", reflect.TypeOf((*MockClient)(nil).UserName), arg0)
}
