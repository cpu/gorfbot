// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cpu/gorfbot/slack (interfaces: SlackAPI)

// Package slack is a generated GoMock package.
package slack

import (
	gomock "github.com/golang/mock/gomock"
	slack "github.com/slack-go/slack"
	reflect "reflect"
)

// MockSlackAPI is a mock of SlackAPI interface
type MockSlackAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSlackAPIMockRecorder
}

// MockSlackAPIMockRecorder is the mock recorder for MockSlackAPI
type MockSlackAPIMockRecorder struct {
	mock *MockSlackAPI
}

// NewMockSlackAPI creates a new mock instance
func NewMockSlackAPI(ctrl *gomock.Controller) *MockSlackAPI {
	mock := &MockSlackAPI{ctrl: ctrl}
	mock.recorder = &MockSlackAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSlackAPI) EXPECT() *MockSlackAPIMockRecorder {
	return m.recorder
}

// GetConversations mocks base method
func (m *MockSlackAPI) GetConversations(arg0 *slack.GetConversationsParameters) ([]slack.Channel, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversations", arg0)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConversations indicates an expected call of GetConversations
func (mr *MockSlackAPIMockRecorder) GetConversations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversations", reflect.TypeOf((*MockSlackAPI)(nil).GetConversations), arg0)
}

// GetUsers mocks base method
func (m *MockSlackAPI) GetUsers() ([]slack.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockSlackAPIMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockSlackAPI)(nil).GetUsers))
}
